#!/usr/bin/env python
import sys
import time
from inbox.models.session import session_scope
from inbox.models.account import Account
import optparse

def print_usage():
    print "usage:   start-stop-account [--start|--stop|--migrate] --id 1000 --server sync-engine-debug --reason 'moving account'"
    print "example: start-stop-account --stop --id 1000 --softdelete"
    print "         start-stop-account --migrate --id 1000 --host sync-engine-100"
    print "batch usage: start-stop-account also accepts tab-separated input on stdin."
    print "             echo 'karim@nylas.com	account_id' | start-stop-account --start --stdin"
    print "             bin/list-accounts --host precise64 --paying | start-stop-account --start --stdin"


def start_stop(options):
    account_id = int(options.account_id)
    with session_scope(account_id) as db_session:
        if options.account_id:
            account = db_session.query(Account).get(account_id)
        else:
            print_usage()
            sys.exit(-1)

        if options.start:
            print "Starting account %s" % account.email_address

            if options.server is not None:
                account.enable_sync(options.server)
            else:
                account.enable_sync(None)

        elif options.stop:
            if not options.softdelete and options.reason is None:
                print "Must specify '--softdelete' OR a reason for stopping the sync (--reason)"
                sys.exit(-1)

            if options.softdelete:
                print "Stopping sync and marking account %s as deleted" % account.email_address
                account.mark_for_deletion()
            else:
                assert options.reason is not None
                print "Stopping sync for account %s" % account.email_address
                account.disable_sync(options.reason)

        elif options.migrate:
            print "Migrating account %s" % account.email_address

            if options.server is None:
                print "Error; you need to specify a server"
                sys.exit(-1)

            account.disable_sync(reason='Migrating')
            db_session.commit()

            time.sleep(30)
            account.enable_sync(options.server)

        db_session.commit()

def main():
    parser = optparse.OptionParser()
    parser.add_option('--start', action="store_true", default=False)
    parser.add_option('--stop', action="store_true", default=False)
    parser.add_option('--migrate', action="store_true", default=False)
    parser.add_option('--softdelete', action="store_true", default=False)
    parser.add_option('--id', action="store", dest="account_id", default=None)
    parser.add_option('--server', action="store", dest="server", default=None)
    parser.add_option('--stdin', action="store_true", default=False)
    parser.add_option('--reason', action="store", default=None)
    options, remainder = parser.parse_args(sys.argv[1:])
    if all(opt is False for opt in [options.start, options.stop,
                                    options.migrate]):
        print_usage()
        sys.exit(-1)

    # If we were not given the --stdin param, only start/stop the account
    # specified on the command-line.
    if not options.stdin:
        start_stop(options)
    # Otherwise read from stdin.
    else:
        for line in sys.stdin:
            splat = line.split()
            if len(splat) < 2:
                continue

            email, id = splat[:2]
            options.account_id = id
            start_stop(options)

if __name__ == '__main__':
    main()
